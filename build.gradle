plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
	id 'java'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	mavenCentral()
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {url = 'https://maven.wispforest.io'}
	maven { url = 'https://maven.maxhenkel.de/repository/public' }
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content { includeGroup "maven.modrinth" }
	}
}

configurations {
	implementation.extendsFrom lib
	api.extendsFrom lib
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"modid" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	accessWidenerPath = file("src/main/resources/cobalt.accesswidener")

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Trinkets
	modImplementation "dev.emi:trinkets:${trinkets_version}"

	// Wispforest Lavender
	modImplementation "io.wispforest:lavender:${project.lavender_version}"
	include "io.wispforest:owo-sentinel:${project.owo_version}" // check owo's page for this version

	// Simple voice chat
	implementation "de.maxhenkel.voicechat:voicechat-api:${project.voicechat_api_version}"
	modRuntimeOnly "maven.modrinth:simple-voice-chat:fabric-${project.voicechat_version}"

	// Math utils
	implementation include(group: 'org.apache.commons', name: 'commons-math3', version: '3.0')
	implementation include('uk.me.berndporr:iirj:1.7')
}

processResources {
	def expandProps = [
	        "version": project.version,
			"minecraft_version": project.minecraft_version,
			"voicechat_api_version": project.voicechat_api_version
	]

	filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
		expand expandProps
	}
	inputs.properties(expandProps)
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

fabricApi {
	configureDataGeneration()
}